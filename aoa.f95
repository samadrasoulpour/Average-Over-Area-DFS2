Program Global_Mean

! This program aoa (Average Over Area )is suppose to Calculate the average SurfaceSalinity Or Temperature over Sae Surface
! Using ASCII text File Generated By Mike DHI

    ! Variables
    implicit none
    character(1000) :: linel
    character(7)   ::  tstep , word
    integer     ::  ios1 ,ios2 ,ios11,ios12,ios3,ios4
    integer     ::  nx ,ny ,i ,j ,ntstep ,t ,firststep,lineNumber
    integer     ::  n ,dtimestep ,nn
    INTEGER     ::  narg,lenarg
    CHARACTER(200)   ::  inarg
    character(Len=:),ALLOCATABLE   :: inarg1,outputname
    CHARACTER   :: chert
    real        ::  x_origin ,y_origin ,z_origin ,x,y ,m ,s
    real        ::  x_dist ,y_dist
    real,allocatable,dimension(:,:,:)    :: SurfaceSalinity
    real,allocatable,dimension(:)   ::  averaged_Data

    ! variables for Timing
    real    ::  starttime,finishtime

    narg=COMMAND_ARGUMENT_COUNT()
    if (narg .NE. 1 ) Then 
        stop "At least One Argument Containing Input file name Which Must Not exceed 200 Characters is Required"
    end if
    call GET_COMMAND_ARGUMENT(1,inarg)
    lenarg=len(trim(inarg))
    if (lenarg>200) then
        stop "Containing Input file name Must Not exceed 200 Characters"
    end if
    allocate(character(Len=lenarg) :: inarg1)
    inarg1=trim(inarg)

    select case (inarg1)
        case("-h","--help")
            write(*,*) " Average Over Area Calculator, Calculates the average SurfaceSalinity Or Temperature Or whatever over &
            & Sae Surface Using ASCII text File Generated By Mike DHI. ASCII file must contain only 1 item and only 2 Dimentions "

        case("-v", "--version")
            write(*,*) " Average Over Area Calculator V1.0 By S.rasoulpour"

        case Default
            allocate(character(Len=lenarg+12) :: outputname)
            outputname=inarg1//''//"_resault.txt"
            ! Opening Input & OutPut Files
            open(unit=1, file=inarg1, iostat=ios1, status="old", action="read")
                if ( ios1 /= 0 ) stop "Error opening Input file"
            open(unit=2, file=outputname, iostat=ios2, action="write")
                if ( ios2 /= 0 ) stop "Error Creating Output file"
            open(unit=3,file="plot.plt", iostat=ios3)
            if ( ios3 /= 0 ) stop "Error writing plot.plt"
            open(unit=4,file="Matrix.txt", iostat=ios4, action="write")
            if ( ios4 /= 0 ) stop "Error opening scratch file on Matrix.txt"
            read(1,*)
            read(1,*)
            read(1,200) x_origin ,y_origin ,z_origin
                write(*,201) "Origin Cordination =" ,x_origin ,y_origin ,z_origin       ! making Sure reads correctly
            read(1,250) ntstep
                write(*,251) "ntstep=" ,ntstep                    ! making Sure reads correctly
            read(1,260)  nx ,ny
                Write(*,261) "dimention in input file" ,nx,ny                                ! making Sure reads correctly
            read(1,270,advance='no') chert
            read(1,*) x_dist ,y_dist
                Write(*,271) "distance between arrays in x & y direction =" ,x_dist ,y_dist                       ! making Sure reads correctly

            tstep='"tstep"'
            lineNumber=0
            do                                                  ! escape Unnecessary Lines
                read(1,180,iostat=ios11) linel
                lineNumber=lineNumber+1
                if (ios11 /= 0) exit
                read (linel,170, iostat=ios12) word
                if (word == tstep ) then
                    print* , "Reading data started From first Time Step at line Number " ,lineNumber
                    exit
                end if
            end do
            Print* , "inter x limit in degrees"
            read* , x
            nx=Floor((x-x_origin)/x_dist)
            Print* ,"Dimention of out put file" , nx,ny                ! prints matrix dimetsions
            allocate(SurfaceSalinity(nx,ny,ntstep))
            print*, "Enter Disred Time serie for Calculating Matrix's Average"
            READ*, dtimestep
            nn=int(ntstep/dtimestep)
            ALLOCATE(averaged_Data(nn))
            ! print*,nn


            call CPU_TIME(starttime)
            do t=1,ntstep,1
                do j=1,ny
                    read(1,*) (SurfaceSalinity(i,j,t),i=1,nx)
                end do

                read(1,*,iostat=ios11)                                  ! This + 4 next lines is for escape unnesessary lines of input file
                    if(ios11/=0) exit
                read(1,*,iostat=ios11)
                    if(ios11/=0) exit
                if(t==2100 .or. t==5000 .or. t==8000) then                  ! This Section is For assure program works Correctly
                    write(4,*) t
                    do j=1,ny
                        write(4,114,iostat=ios4) (SurfaceSalinity(i,j,t),i=1,nx)
                        if(ios4 /=0) exit
                    end do
                end if

                ! call Matrix_Non_Zero_Mean(SurfaceSalinity,nx,ny,n,s,m)
                ! write(2,310) t ,m ,n ,s

            end do

            print*, size(SurfaceSalinity)
            call dailymean(SurfaceSalinity,nx,ny,ntstep,dtimestep,averaged_Data,nn)
            do i=1,nn
                write(2,300) i ,averaged_Data(i)
            end do

            call CPU_TIME(finishtime)
            WRITE(*,320) "Time Elapsed =", finishtime-starttime

                ! writing Gnuplot File {plot.plt}
            write(unit=3, fmt="(a6,a,a29,a,a1)") 'plot "',outputname,'" using 1:2 with line title "',inarg1,'"'
            write(unit=3, fmt="(a27)") 'set xlabel "time" font "15"'
            write(unit=3, fmt="(a12,a,a11)") 'set ylabel "',inarg1,'" font "15"'

            call system('gnuplot -p plot.plt')           ! plots the out put file and only works if a text file nemed plot.plt exist in this directory
    end select

114 format(289(f6.2,4x))
170 format(a7)
180 format(a)
200 format(16x,f8.4,f5.1,f4.1)
201 format(a22,4x,f8.4,f5.1,f4.1)
250 format(52x,i5,5x)
251 format(a9,4x,i5,5x)
260 format(15x,i4,i4)
261 format(a25,4x,i4,i4)
270 format(a9)
271 format(a46,4x,f8.5,f8.5)
300 format(i4,4x,f5.2)
310 format(i4,4x,f5.2,4x,i6,4x,f9.2)
320 format(a14,4x,f10.1)
end Program Global_Mean




! This Subroutine calculates average of matrix arrays in EVERY Time Step 
! and ignores zero values in calculation
! subroutine Matrix_Non_Zero_Mean(Matrix,XX,YY,n,sum,m)
    ! real                    :: sum ,m
    ! integer                 :: i ,j ,XX ,YY , n
    ! real,dimension(XX,YY)   :: Matrix
    ! n=0
    ! sum=0
    ! do J=1,YY,1
    !     do i=1,XX,1
    !         if((Matrix(i,j) > 1e-30) ) then
    !             n=n+1
    !             sum=sum+Matrix(i,j)
    !         end if
    !     end do
    ! end do
    ! m=sum/(n)
! end subroutine Matrix_Non_Zero_Mean

! This Subroutine calculates average of matrix arrays in ANY Desired time steps
! and ignores zero values in calculation

subroutine dailymean(Matrix,XX,YY,ntstep,dtimestep,averaged_Data,nn)
! Matrix = Data that have been read from ascii text file result from MikeDHI data serie
! XX     = Matrix Dimention along axis X
! YY     = Matrix Dimention along axis Y
! ntstep = Time Dimention Of Matrix 
! dtimestep = Disred Time serie for Calculating Matrix's Average
! n      = Number of Non_Zero arrays in every step
! sum    = Sumation of Non_Zero arrays in every step
! averaged_Data = A 2D Matrix for Storing Calculated Data
! tt     = Timestep Index in averaged_Data Matris

    
    real                    :: sum ,m
    integer                 :: i ,j ,XX ,YY , n ,ntstep ,t,tt ,dtimestep,nn
    real,dimension(XX,YY,ntstep)   :: Matrix
    real,dimension(nn)      :: averaged_Data


    n=0
    sum=0
    tt=0
    do t = 1 ,ntstep ,1
        do J=1,YY,1
            do i=1,XX,1
                if((Matrix(i,j,t) > 1e-30) ) then
                    n=n+1
                    sum=sum+Matrix(i,j,t)
                end if
            end do
        end do
        if(mod(t,dtimestep) .eq. 0) then
            tt=tt+1
            averaged_Data(tt)=sum/n
            print*, t, tt , averaged_Data(tt)
                ! Then it has to reset The Counter "n" and Summation "sum"
            sum=0
            n=0
        end if
    end do




end subroutine dailymean